
DC_Motors_Driver_with_Encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002da8  08002da8  00003da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dcc  08002dcc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dcc  08002dcc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dd0  08002dd0  00003dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dd4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002de0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002de0  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000818a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001680  00000000  00000000  0000c1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0000d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000761  00000000  00000000  0000e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165fb  00000000  00000000  0000e929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009684  00000000  00000000  00024f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084265  00000000  00000000  0002e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b280d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000b2850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000b4f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d90 	.word	0x08002d90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d90 	.word	0x08002d90

0800014c <Motor_SetSpeed>:
    uint32_t ch2;           // PWM channel 2 (negative direction)
    void (*speed)(struct motor *, int16_t);  // Function pointer for speed control
} motor;

// Speed control function for a motor
void Motor_SetSpeed(motor *m, int16_t speed) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    if (speed > 0) {
 8000158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	dd4a      	ble.n	80001f6 <Motor_SetSpeed+0xaa>
        // Forward direction
        __HAL_TIM_SET_COMPARE(m->tim, m->ch1, speed);
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	685b      	ldr	r3, [r3, #4]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d106      	bne.n	8000176 <Motor_SetSpeed+0x2a>
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000172:	635a      	str	r2, [r3, #52]	@ 0x34
 8000174:	e01b      	b.n	80001ae <Motor_SetSpeed+0x62>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	685b      	ldr	r3, [r3, #4]
 800017a:	2b04      	cmp	r3, #4
 800017c:	d106      	bne.n	800018c <Motor_SetSpeed+0x40>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000188:	6393      	str	r3, [r2, #56]	@ 0x38
 800018a:	e010      	b.n	80001ae <Motor_SetSpeed+0x62>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b08      	cmp	r3, #8
 8000192:	d106      	bne.n	80001a2 <Motor_SetSpeed+0x56>
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800019e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001a0:	e005      	b.n	80001ae <Motor_SetSpeed+0x62>
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80001ac:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d105      	bne.n	80001c2 <Motor_SetSpeed+0x76>
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2200      	movs	r2, #0
 80001be:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Stop motor
        __HAL_TIM_SET_COMPARE(m->tim, m->ch1, 0);
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
    }
}
 80001c0:	e0b6      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	2b04      	cmp	r3, #4
 80001c8:	d105      	bne.n	80001d6 <Motor_SetSpeed+0x8a>
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	2300      	movs	r3, #0
 80001d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80001d4:	e0ac      	b.n	8000330 <Motor_SetSpeed+0x1e4>
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	2b08      	cmp	r3, #8
 80001dc:	d105      	bne.n	80001ea <Motor_SetSpeed+0x9e>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	2300      	movs	r3, #0
 80001e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001e8:	e0a2      	b.n	8000330 <Motor_SetSpeed+0x1e4>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80001f4:	e09c      	b.n	8000330 <Motor_SetSpeed+0x1e4>
    } else if (speed < 0) {
 80001f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	da51      	bge.n	80002a2 <Motor_SetSpeed+0x156>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch1, 0);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d105      	bne.n	8000212 <Motor_SetSpeed+0xc6>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000210:	e018      	b.n	8000244 <Motor_SetSpeed+0xf8>
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	2b04      	cmp	r3, #4
 8000218:	d105      	bne.n	8000226 <Motor_SetSpeed+0xda>
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	2300      	movs	r3, #0
 8000222:	6393      	str	r3, [r2, #56]	@ 0x38
 8000224:	e00e      	b.n	8000244 <Motor_SetSpeed+0xf8>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	2b08      	cmp	r3, #8
 800022c:	d105      	bne.n	800023a <Motor_SetSpeed+0xee>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	2300      	movs	r3, #0
 8000236:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000238:	e004      	b.n	8000244 <Motor_SetSpeed+0xf8>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, -speed);  // Make speed positive for PWM
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d107      	bne.n	800025c <Motor_SetSpeed+0x110>
 800024c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000250:	425a      	negs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800025a:	e069      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, -speed);  // Make speed positive for PWM
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d108      	bne.n	8000276 <Motor_SetSpeed+0x12a>
 8000264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000268:	4259      	negs	r1, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	460b      	mov	r3, r1
 8000272:	6393      	str	r3, [r2, #56]	@ 0x38
 8000274:	e05c      	b.n	8000330 <Motor_SetSpeed+0x1e4>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b08      	cmp	r3, #8
 800027c:	d108      	bne.n	8000290 <Motor_SetSpeed+0x144>
 800027e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000282:	4259      	negs	r1, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	460b      	mov	r3, r1
 800028c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800028e:	e04f      	b.n	8000330 <Motor_SetSpeed+0x1e4>
 8000290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000294:	4259      	negs	r1, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	460b      	mov	r3, r1
 800029e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80002a0:	e046      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch1, 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <Motor_SetSpeed+0x16a>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80002b4:	e018      	b.n	80002e8 <Motor_SetSpeed+0x19c>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d105      	bne.n	80002ca <Motor_SetSpeed+0x17e>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	2300      	movs	r3, #0
 80002c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80002c8:	e00e      	b.n	80002e8 <Motor_SetSpeed+0x19c>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	2b08      	cmp	r3, #8
 80002d0:	d105      	bne.n	80002de <Motor_SetSpeed+0x192>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	2300      	movs	r3, #0
 80002da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80002dc:	e004      	b.n	80002e8 <Motor_SetSpeed+0x19c>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	2300      	movs	r3, #0
 80002e6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d105      	bne.n	80002fc <Motor_SetSpeed+0x1b0>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002fa:	e019      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d105      	bne.n	8000310 <Motor_SetSpeed+0x1c4>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	2300      	movs	r3, #0
 800030c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800030e:	e00f      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	2b08      	cmp	r3, #8
 8000316:	d105      	bne.n	8000324 <Motor_SetSpeed+0x1d8>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000322:	e005      	b.n	8000330 <Motor_SetSpeed+0x1e4>
        __HAL_TIM_SET_COMPARE(m->tim, m->ch2, 0);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	2300      	movs	r3, #0
 800032c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800032e:	e7ff      	b.n	8000330 <Motor_SetSpeed+0x1e4>
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
	...

0800033c <Motor_Init>:

// Initialize a motor instance
motor Motor_Init(TIM_HandleTypeDef *tim, uint32_t ch1, uint32_t ch2) {
 800033c:	b490      	push	{r4, r7}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	603b      	str	r3, [r7, #0]
    motor m;
    m.tim = tim;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	613b      	str	r3, [r7, #16]
    m.ch1 = ch1;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	617b      	str	r3, [r7, #20]
    m.ch2 = ch2;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	61bb      	str	r3, [r7, #24]
    m.speed = Motor_SetSpeed;  // Assign the speed function
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <Motor_Init+0x38>)
 8000358:	61fb      	str	r3, [r7, #28]
    return m;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	461c      	mov	r4, r3
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000368:	68f8      	ldr	r0, [r7, #12]
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bc90      	pop	{r4, r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	0800014d 	.word	0x0800014d

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	@ 0x40
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// Start PWM Gen. in all Channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800037e:	2100      	movs	r1, #0
 8000380:	4826      	ldr	r0, [pc, #152]	@ (800041c <main+0xa4>)
 8000382:	f001 fc25 	bl	8001bd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000386:	2104      	movs	r1, #4
 8000388:	4824      	ldr	r0, [pc, #144]	@ (800041c <main+0xa4>)
 800038a:	f001 fc21 	bl	8001bd0 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);


    // Initialize motor instances
    motor M1 = Motor_Init(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800038e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000392:	2304      	movs	r3, #4
 8000394:	2200      	movs	r2, #0
 8000396:	4921      	ldr	r1, [pc, #132]	@ (800041c <main+0xa4>)
 8000398:	f7ff ffd0 	bl	800033c <Motor_Init>
    motor M2 = Motor_Init(&htim1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800039c:	f107 0020 	add.w	r0, r7, #32
 80003a0:	230c      	movs	r3, #12
 80003a2:	2208      	movs	r2, #8
 80003a4:	491d      	ldr	r1, [pc, #116]	@ (800041c <main+0xa4>)
 80003a6:	f7ff ffc9 	bl	800033c <Motor_Init>
    motor M3 = Motor_Init(&htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80003aa:	f107 0010 	add.w	r0, r7, #16
 80003ae:	2304      	movs	r3, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	491b      	ldr	r1, [pc, #108]	@ (8000420 <main+0xa8>)
 80003b4:	f7ff ffc2 	bl	800033c <Motor_Init>
    motor M4 = Motor_Init(&htim2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80003b8:	4638      	mov	r0, r7
 80003ba:	230c      	movs	r3, #12
 80003bc:	2208      	movs	r2, #8
 80003be:	4918      	ldr	r1, [pc, #96]	@ (8000420 <main+0xa8>)
 80003c0:	f7ff ffbc 	bl	800033c <Motor_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fc4e 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f82e 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 fa40 	bl	8000850 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003d0:	f000 f870 	bl	80004b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d4:	f000 f932 	bl	800063c <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d8:	f000 f9c6 	bl	8000768 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Set motor speeds
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <main+0xa8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003e4:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <main+0xa8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2200      	movs	r2, #0
 80003ec:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  HAL_Delay(1000);     // Wait for 1 second
 80003ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f2:	f000 fc99 	bl	8000d28 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fc:	4809      	ldr	r0, [pc, #36]	@ (8000424 <main+0xac>)
 80003fe:	f000 ff49 	bl	8001294 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);     // Wait for 1 second
 8000402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000406:	f000 fc8f 	bl	8000d28 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <main+0xac>)
 8000412:	f000 ff3f 	bl	8001294 <HAL_GPIO_WritePin>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8000416:	bf00      	nop
 8000418:	e7e0      	b.n	80003dc <main+0x64>
 800041a:	bf00      	nop
 800041c:	20000028 	.word	0x20000028
 8000420:	20000070 	.word	0x20000070
 8000424:	40011000 	.word	0x40011000

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	@ 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fc7d 	bl	8002d36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000464:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000466:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800046a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4618      	mov	r0, r3
 8000472:	f000 ff27 	bl	80012c4 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800047c:	f000 fa40 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000484:	2302      	movs	r3, #2
 8000486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 f994 	bl	80017c8 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a6:	f000 fa2b 	bl	8000900 <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	@ 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b096      	sub	sp, #88	@ 0x58
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2220      	movs	r2, #32
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fc22 	bl	8002d36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f2:	4b50      	ldr	r3, [pc, #320]	@ (8000634 <MX_TIM1_Init+0x180>)
 80004f4:	4a50      	ldr	r2, [pc, #320]	@ (8000638 <MX_TIM1_Init+0x184>)
 80004f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000634 <MX_TIM1_Init+0x180>)
 80004fa:	2247      	movs	r2, #71	@ 0x47
 80004fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000504:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000506:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b49      	ldr	r3, [pc, #292]	@ (8000634 <MX_TIM1_Init+0x180>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000512:	4b48      	ldr	r3, [pc, #288]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b46      	ldr	r3, [pc, #280]	@ (8000634 <MX_TIM1_Init+0x180>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800051e:	4845      	ldr	r0, [pc, #276]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000520:	f001 faae 	bl	8001a80 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800052a:	f000 f9e9 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000532:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000534:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000538:	4619      	mov	r1, r3
 800053a:	483e      	ldr	r0, [pc, #248]	@ (8000634 <MX_TIM1_Init+0x180>)
 800053c:	f001 fe88 	bl	8002250 <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000546:	f000 f9db 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800054a:	483a      	ldr	r0, [pc, #232]	@ (8000634 <MX_TIM1_Init+0x180>)
 800054c:	f001 fae7 	bl	8001b1e <HAL_TIM_PWM_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000556:	f000 f9d3 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000562:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000566:	4619      	mov	r1, r3
 8000568:	4832      	ldr	r0, [pc, #200]	@ (8000634 <MX_TIM1_Init+0x180>)
 800056a:	f002 fb23 	bl	8002bb4 <HAL_TIMEx_MasterConfigSynchronization>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000574:	f000 f9c4 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000578:	2360      	movs	r3, #96	@ 0x60
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000590:	2300      	movs	r3, #0
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	4825      	ldr	r0, [pc, #148]	@ (8000634 <MX_TIM1_Init+0x180>)
 800059e:	f001 fd95 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80005a8:	f000 f9aa 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b0:	2204      	movs	r2, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	481f      	ldr	r0, [pc, #124]	@ (8000634 <MX_TIM1_Init+0x180>)
 80005b6:	f001 fd89 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80005c0:	f000 f99e 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c8:	2208      	movs	r2, #8
 80005ca:	4619      	mov	r1, r3
 80005cc:	4819      	ldr	r0, [pc, #100]	@ (8000634 <MX_TIM1_Init+0x180>)
 80005ce:	f001 fd7d 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005d8:	f000 f992 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e0:	220c      	movs	r2, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <MX_TIM1_Init+0x180>)
 80005e6:	f001 fd71 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80005f0:	f000 f986 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000618:	f002 fb2a 	bl	8002c70 <HAL_TIMEx_ConfigBreakDeadTime>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000622:	f000 f96d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000626:	4803      	ldr	r0, [pc, #12]	@ (8000634 <MX_TIM1_Init+0x180>)
 8000628:	f000 fa4a 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	@ 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	40012c00 	.word	0x40012c00

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	@ 0x38
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
 800066a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066c:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <MX_TIM2_Init+0x128>)
 800066e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000674:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000676:	2247      	movs	r2, #71	@ 0x47
 8000678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b3a      	ldr	r3, [pc, #232]	@ (8000764 <MX_TIM2_Init+0x128>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000680:	4b38      	ldr	r3, [pc, #224]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b36      	ldr	r3, [pc, #216]	@ (8000764 <MX_TIM2_Init+0x128>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000694:	4833      	ldr	r0, [pc, #204]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000696:	f001 f9f3 	bl	8001a80 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a0:	f000 f92e 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ae:	4619      	mov	r1, r3
 80006b0:	482c      	ldr	r0, [pc, #176]	@ (8000764 <MX_TIM2_Init+0x128>)
 80006b2:	f001 fdcd 	bl	8002250 <HAL_TIM_ConfigClockSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006bc:	f000 f920 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c0:	4828      	ldr	r0, [pc, #160]	@ (8000764 <MX_TIM2_Init+0x128>)
 80006c2:	f001 fa2c 	bl	8001b1e <HAL_TIM_PWM_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006cc:	f000 f918 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4619      	mov	r1, r3
 80006de:	4821      	ldr	r0, [pc, #132]	@ (8000764 <MX_TIM2_Init+0x128>)
 80006e0:	f002 fa68 	bl	8002bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ea:	f000 f909 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ee:	2360      	movs	r3, #96	@ 0x60
 80006f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	4817      	ldr	r0, [pc, #92]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000706:	f001 fce1 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000710:	f000 f8f6 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2204      	movs	r2, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <MX_TIM2_Init+0x128>)
 800071c:	f001 fcd6 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000726:	f000 f8eb 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2208      	movs	r2, #8
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000732:	f001 fccb 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800073c:	f000 f8e0 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	220c      	movs	r2, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000748:	f001 fcc0 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000752:	f000 f8d5 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	@ (8000764 <MX_TIM2_Init+0x128>)
 8000758:	f000 f9b2 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3738      	adds	r7, #56	@ 0x38
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000070 	.word	0x20000070

08000768 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000784:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <MX_TIM3_Init+0xe0>)
 8000786:	4a31      	ldr	r2, [pc, #196]	@ (800084c <MX_TIM3_Init+0xe4>)
 8000788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <MX_TIM3_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <MX_TIM3_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <MX_TIM3_Init+0xe0>)
 8000798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800079c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <MX_TIM3_Init+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_TIM3_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80007aa:	4827      	ldr	r0, [pc, #156]	@ (8000848 <MX_TIM3_Init+0xe0>)
 80007ac:	f001 fab2 	bl	8001d14 <HAL_TIM_IC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8a3 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	481f      	ldr	r0, [pc, #124]	@ (8000848 <MX_TIM3_Init+0xe0>)
 80007ca:	f002 f9f3 	bl	8002bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007d4:	f000 f894 	bl	8000900 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	@ (8000848 <MX_TIM3_Init+0xe0>)
 80007f0:	f001 fbcf 	bl	8001f92 <HAL_TIM_IC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 f881 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2204      	movs	r2, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	@ (8000848 <MX_TIM3_Init+0xe0>)
 8000806:	f001 fbc4 	bl	8001f92 <HAL_TIM_IC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000810:	f000 f876 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2208      	movs	r2, #8
 8000818:	4619      	mov	r1, r3
 800081a:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_TIM3_Init+0xe0>)
 800081c:	f001 fbb9 	bl	8001f92 <HAL_TIM_IC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000826:	f000 f86b 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	220c      	movs	r2, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_TIM3_Init+0xe0>)
 8000832:	f001 fbae 	bl	8001f92 <HAL_TIM_IC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800083c:	f000 f860 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000b8 	.word	0x200000b8
 800084c:	40000400 	.word	0x40000400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a23      	ldr	r2, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a1d      	ldr	r2, [pc, #116]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a11      	ldr	r2, [pc, #68]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_GPIO_Init+0xa8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	480c      	ldr	r0, [pc, #48]	@ (80008fc <MX_GPIO_Init+0xac>)
 80008cc:	f000 fce2 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0xac>)
 80008ea:	f000 fb4f 	bl	8000f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40011000 	.word	0x40011000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <HAL_TIM_Base_MspInit+0x88>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d11c      	bne.n	80009bc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	201a      	movs	r0, #26
 80009a0:	f000 fabd 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80009a4:	201a      	movs	r0, #26
 80009a6:	f000 fad6 	bl	8000f56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	201b      	movs	r0, #27
 80009b0:	f000 fab5 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009b4:	201b      	movs	r0, #27
 80009b6:	f000 face 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ba:	e018      	b.n	80009ee <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c4:	d113      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_TIM_Base_MspInit+0x8c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	201c      	movs	r0, #28
 80009e4:	f000 fa9b 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e8:	201c      	movs	r0, #28
 80009ea:	f000 fab4 	bl	8000f56 <HAL_NVIC_EnableIRQ>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40012c00 	.word	0x40012c00
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a25      	ldr	r2, [pc, #148]	@ (8000ab0 <HAL_TIM_IC_MspInit+0xb0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d143      	bne.n	8000aa8 <HAL_TIM_IC_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a20:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_TIM_IC_MspInit+0xb4>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a68:	23c0      	movs	r3, #192	@ 0xc0
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480f      	ldr	r0, [pc, #60]	@ (8000ab8 <HAL_TIM_IC_MspInit+0xb8>)
 8000a7c:	f000 fa86 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4619      	mov	r1, r3
 8000a92:	480a      	ldr	r0, [pc, #40]	@ (8000abc <HAL_TIM_IC_MspInit+0xbc>)
 8000a94:	f000 fa7a 	bl	8000f8c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	201d      	movs	r0, #29
 8000a9e:	f000 fa3e 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f000 fa57 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	@ 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	@ (8000b58 <HAL_TIM_MspPostInit+0x98>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d119      	bne.n	8000b14 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000af8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4814      	ldr	r0, [pc, #80]	@ (8000b60 <HAL_TIM_MspPostInit+0xa0>)
 8000b0e:	f000 fa3d 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b12:	e01c      	b.n	8000b4e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b1c:	d117      	bne.n	8000b4e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b36:	230f      	movs	r3, #15
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_TIM_MspPostInit+0xa0>)
 8000b4a:	f000 fa1f 	bl	8000f8c <HAL_GPIO_Init>
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f89c 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <TIM1_TRG_COM_IRQHandler+0x10>)
 8000bc2:	f001 f8f6 	bl	8001db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000028 	.word	0x20000028

08000bd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <TIM1_CC_IRQHandler+0x10>)
 8000bd6:	f001 f8ec 	bl	8001db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000028 	.word	0x20000028

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM2_IRQHandler+0x10>)
 8000bea:	f001 f8e2 	bl	8001db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000070 	.word	0x20000070

08000bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <TIM3_IRQHandler+0x10>)
 8000bfe:	f001 f8d8 	bl	8001db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000b8 	.word	0x200000b8

08000c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff fff8 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c1e:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c34:	4c09      	ldr	r4, [pc, #36]	@ (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f002 f881 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c46:	f7ff fb97 	bl	8000378 <main>
  bx lr
 8000c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08002dd4 	.word	0x08002dd4
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	20000104 	.word	0x20000104

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f947 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe44 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f95f 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 f927 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <HAL_IncTick+0x20>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000100 	.word	0x20000100

08000d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b02      	ldr	r3, [pc, #8]	@ (8000d24 <HAL_GetTick+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000100 	.word	0x20000100

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff fff0 	bl	8000d14 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffe0 	bl	8000d14 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4906      	ldr	r1, [pc, #24]	@ (8000e08 <__NVIC_EnableIRQ+0x34>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f7ff ff90 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff2d 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff42 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff90 	bl	8000e60 <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5f 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff35 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	@ 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fec:	4a92      	ldr	r2, [pc, #584]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xcc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_GPIO_Init+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	@ (8001240 <HAL_GPIO_Init+0x2b4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x130>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x13a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x13e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x14c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x152>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <HAL_GPIO_Init+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_GPIO_Init+0x2c4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_GPIO_Init+0x2c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <HAL_GPIO_Init+0x2cc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1e0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492c      	ldr	r1, [pc, #176]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4922      	ldr	r1, [pc, #136]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4918      	ldr	r1, [pc, #96]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2e2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <HAL_GPIO_Init+0x304>)
 800126a:	4013      	ands	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f ae8e 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	@ 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	611a      	str	r2, [r3, #16]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e272      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8087 	beq.w	80013f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e4:	4b92      	ldr	r3, [pc, #584]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d00c      	beq.n	800130a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d112      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
 80012fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	4b89      	ldr	r3, [pc, #548]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d06c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x12c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d168      	bne.n	80013f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e24c      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x76>
 800132c:	4b80      	ldr	r3, [pc, #512]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7f      	ldr	r2, [pc, #508]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e02e      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b7b      	ldr	r3, [pc, #492]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7a      	ldr	r2, [pc, #488]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b78      	ldr	r3, [pc, #480]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a77      	ldr	r2, [pc, #476]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0xbc>
 8001366:	4b72      	ldr	r3, [pc, #456]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a71      	ldr	r2, [pc, #452]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6f      	ldr	r3, [pc, #444]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6e      	ldr	r2, [pc, #440]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 8001380:	4b6b      	ldr	r3, [pc, #428]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6a      	ldr	r2, [pc, #424]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b68      	ldr	r3, [pc, #416]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a67      	ldr	r2, [pc, #412]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcb8 	bl	8000d14 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcb4 	bl	8000d14 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e200      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe4>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fca4 	bl	8000d14 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fca0 	bl	8000d14 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	@ 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1ec      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x10c>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x18c>
 8001416:	4b46      	ldr	r3, [pc, #280]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x176>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c0      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4939      	ldr	r1, [pc, #228]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <HAL_RCC_OscConfig+0x270>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fc59 	bl	8000d14 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc55 	bl	8000d14 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1a1      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4927      	ldr	r1, [pc, #156]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_RCC_OscConfig+0x270>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc38 	bl	8000d14 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc34 	bl	8000d14 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e180      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03a      	beq.n	8001548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_RCC_OscConfig+0x274>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc18 	bl	8000d14 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc14 	bl	8000d14 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e160      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f000 fa9c 	bl	8001a44 <RCC_Delay>
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_RCC_OscConfig+0x274>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fbfe 	bl	8000d14 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151a:	e00f      	b.n	800153c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fbfa 	bl	8000d14 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d908      	bls.n	800153c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e146      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	42420000 	.word	0x42420000
 8001538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e9      	bne.n	800151c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a6 	beq.w	80016a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b8b      	ldr	r3, [pc, #556]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a87      	ldr	r2, [pc, #540]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b85      	ldr	r3, [pc, #532]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b82      	ldr	r3, [pc, #520]	@ (800178c <HAL_RCC_OscConfig+0x4c8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b7f      	ldr	r3, [pc, #508]	@ (800178c <HAL_RCC_OscConfig+0x4c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	@ (800178c <HAL_RCC_OscConfig+0x4c8>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fbbb 	bl	8000d14 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fbb7 	bl	8000d14 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	@ 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e103      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <HAL_RCC_OscConfig+0x4c8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x334>
 80015de:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a69      	ldr	r2, [pc, #420]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b67      	ldr	r3, [pc, #412]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a66      	ldr	r2, [pc, #408]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x356>
 8001600:	4b61      	ldr	r3, [pc, #388]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a60      	ldr	r2, [pc, #384]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	4b5e      	ldr	r3, [pc, #376]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a5d      	ldr	r2, [pc, #372]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 800161a:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	4b58      	ldr	r3, [pc, #352]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a57      	ldr	r2, [pc, #348]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d015      	beq.n	8001666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fb6b 	bl	8000d14 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fb67 	bl	8000d14 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0b1      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ee      	beq.n	8001642 <HAL_RCC_OscConfig+0x37e>
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff fb55 	bl	8000d14 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff fb51 	bl	8000d14 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e09b      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001696:	4b3c      	ldr	r3, [pc, #240]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8087 	beq.w	80017ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d061      	beq.n	800177c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d146      	bne.n	800174e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb25 	bl	8000d14 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fb21 	bl	8000d14 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e06d      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4921      	ldr	r1, [pc, #132]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a19      	ldr	r1, [r3, #32]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	430b      	orrs	r3, r1
 800171a:	491b      	ldr	r1, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff faf5 	bl	8000d14 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff faf1 	bl	8000d14 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e03d      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
 800174c:	e035      	b.n	80017ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_RCC_OscConfig+0x4cc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fade 	bl	8000d14 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fada 	bl	8000d14 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e026      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x498>
 800177a:	e01e      	b.n	80017ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e019      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
 8001788:	40021000 	.word	0x40021000
 800178c:	40007000 	.word	0x40007000
 8001790:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_RCC_OscConfig+0x500>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0d0      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d910      	bls.n	800180c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b67      	ldr	r3, [pc, #412]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0207 	bic.w	r2, r3, #7
 80017f2:	4965      	ldr	r1, [pc, #404]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b63      	ldr	r3, [pc, #396]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b8      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a58      	ldr	r2, [pc, #352]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800182e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800183c:	4b53      	ldr	r3, [pc, #332]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a52      	ldr	r2, [pc, #328]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b50      	ldr	r3, [pc, #320]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	494d      	ldr	r1, [pc, #308]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d040      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e07f      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b41      	ldr	r3, [pc, #260]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e073      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06b      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a6:	4b39      	ldr	r3, [pc, #228]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f023 0203 	bic.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4936      	ldr	r1, [pc, #216]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff fa2c 	bl	8000d14 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff fa28 	bl	8000d14 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e053      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 020c 	and.w	r2, r3, #12
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1eb      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d210      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 0207 	bic.w	r2, r3, #7
 80018fe:	4922      	ldr	r1, [pc, #136]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e032      	b.n	800197e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4916      	ldr	r1, [pc, #88]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	490e      	ldr	r1, [pc, #56]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001956:	f000 f821 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800195a:	4602      	mov	r2, r0
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	490a      	ldr	r1, [pc, #40]	@ (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	5ccb      	ldrb	r3, [r1, r3]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <HAL_RCC_ClockConfig+0x1cc>)
 8001970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1d0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f98a 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000
 800198c:	40021000 	.word	0x40021000
 8001990:	08002da8 	.word	0x08002da8
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d002      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x30>
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ca:	e027      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ce:	613b      	str	r3, [r7, #16]
      break;
 80019d0:	e027      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0c5b      	lsrs	r3, r3, #17
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	fb03 f202 	mul.w	r2, r3, r2
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e004      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	613b      	str	r3, [r7, #16]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1e:	613b      	str	r3, [r7, #16]
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	693b      	ldr	r3, [r7, #16]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	007a1200 	.word	0x007a1200
 8001a38:	08002db8 	.word	0x08002db8
 8001a3c:	08002dc8 	.word	0x08002dc8
 8001a40:	003d0900 	.word	0x003d0900

08001a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <RCC_Delay+0x34>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <RCC_Delay+0x38>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a60:	bf00      	nop
  }
  while (Delay --);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f9      	bne.n	8001a60 <RCC_Delay+0x1c>
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe ff62 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 fcba 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e041      	b.n	8001bb4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f839 	bl	8001bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f000 fc6b 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_TIM_PWM_Start+0x24>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e022      	b.n	8001c3a <HAL_TIM_PWM_Start+0x6a>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d109      	bne.n	8001c0e <HAL_TIM_PWM_Start+0x3e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e015      	b.n	8001c3a <HAL_TIM_PWM_Start+0x6a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d109      	bne.n	8001c28 <HAL_TIM_PWM_Start+0x58>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e008      	b.n	8001c3a <HAL_TIM_PWM_Start+0x6a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e05e      	b.n	8001d00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <HAL_TIM_PWM_Start+0x82>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c50:	e013      	b.n	8001c7a <HAL_TIM_PWM_Start+0xaa>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d104      	bne.n	8001c62 <HAL_TIM_PWM_Start+0x92>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c60:	e00b      	b.n	8001c7a <HAL_TIM_PWM_Start+0xaa>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d104      	bne.n	8001c72 <HAL_TIM_PWM_Start+0xa2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c70:	e003      	b.n	8001c7a <HAL_TIM_PWM_Start+0xaa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 ff71 	bl	8002b6a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_TIM_PWM_Start+0x138>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d107      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_TIM_PWM_Start+0x138>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_TIM_PWM_Start+0xfa>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb4:	d009      	beq.n	8001cca <HAL_TIM_PWM_Start+0xfa>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <HAL_TIM_PWM_Start+0x13c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_TIM_PWM_Start+0xfa>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <HAL_TIM_PWM_Start+0x140>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d111      	bne.n	8001cee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d010      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cec:	e007      	b.n	8001cfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800

08001d14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fe60 	bl	8000a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 fb70 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01b      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0202 	mvn.w	r2, #2
 8001de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fb00 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8001e02:	e005      	b.n	8001e10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 faf3 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fb02 	bl	8002414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01b      	beq.n	8001e62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0204 	mvn.w	r2, #4
 8001e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fada 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8001e4e:	e005      	b.n	8001e5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 facd 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fadc 	bl	8002414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01b      	beq.n	8001eae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0208 	mvn.w	r2, #8
 8001e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fab4 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8001e9a:	e005      	b.n	8001ea8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 faa7 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fab6 	bl	8002414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01b      	beq.n	8001efa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f06f 0210 	mvn.w	r2, #16
 8001eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fa8e 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8001ee6:	e005      	b.n	8001ef4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa81 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa90 	bl	8002414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 0201 	mvn.w	r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fa60 	bl	80023de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fef1 	bl	8002d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fa60 	bl	8002426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00c      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0220 	mvn.w	r2, #32
 8001f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fec4 	bl	8002d12 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e088      	b.n	80020c2 <HAL_TIM_IC_ConfigChannel+0x130>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001fce:	f000 fc29 	bl	8002824 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 020c 	bic.w	r2, r2, #12
 8001fe0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6999      	ldr	r1, [r3, #24]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e060      	b.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11c      	bne.n	8002036 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800200c:	f000 fc92 	bl	8002934 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800201e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6999      	ldr	r1, [r3, #24]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	021a      	lsls	r2, r3, #8
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	e040      	b.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800204c:	f000 fcdd 	bl	8002a0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020c 	bic.w	r2, r2, #12
 800205e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69d9      	ldr	r1, [r3, #28]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	61da      	str	r2, [r3, #28]
 8002072:	e021      	b.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d11c      	bne.n	80020b4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800208a:	f000 fcf9 	bl	8002a80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800209c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69d9      	ldr	r1, [r3, #28]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	021a      	lsls	r2, r3, #8
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	61da      	str	r2, [r3, #28]
 80020b2:	e001      	b.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0ae      	b.n	8002248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	f200 809f 	bhi.w	8002238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002135 	.word	0x08002135
 8002104:	08002239 	.word	0x08002239
 8002108:	08002239 	.word	0x08002239
 800210c:	08002239 	.word	0x08002239
 8002110:	08002175 	.word	0x08002175
 8002114:	08002239 	.word	0x08002239
 8002118:	08002239 	.word	0x08002239
 800211c:	08002239 	.word	0x08002239
 8002120:	080021b7 	.word	0x080021b7
 8002124:	08002239 	.word	0x08002239
 8002128:	08002239 	.word	0x08002239
 800212c:	08002239 	.word	0x08002239
 8002130:	080021f7 	.word	0x080021f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f9ea 	bl	8002514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6999      	ldr	r1, [r3, #24]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	619a      	str	r2, [r3, #24]
      break;
 8002172:	e064      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa30 	bl	80025e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6999      	ldr	r1, [r3, #24]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	021a      	lsls	r2, r3, #8
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	619a      	str	r2, [r3, #24]
      break;
 80021b4:	e043      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fa79 	bl	80026b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0208 	orr.w	r2, r2, #8
 80021d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0204 	bic.w	r2, r2, #4
 80021e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
      break;
 80021f4:	e023      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fac3 	bl	8002788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69d9      	ldr	r1, [r3, #28]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	021a      	lsls	r2, r3, #8
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	61da      	str	r2, [r3, #28]
      break;
 8002236:	e002      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	75fb      	strb	r3, [r7, #23]
      break;
 800223c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_TIM_ConfigClockSource+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e0b4      	b.n	80023d6 <HAL_TIM_ConfigClockSource+0x186>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a4:	d03e      	beq.n	8002324 <HAL_TIM_ConfigClockSource+0xd4>
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022aa:	f200 8087 	bhi.w	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b2:	f000 8086 	beq.w	80023c2 <HAL_TIM_ConfigClockSource+0x172>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ba:	d87f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b70      	cmp	r3, #112	@ 0x70
 80022be:	d01a      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xa6>
 80022c0:	2b70      	cmp	r3, #112	@ 0x70
 80022c2:	d87b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b60      	cmp	r3, #96	@ 0x60
 80022c6:	d050      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x11a>
 80022c8:	2b60      	cmp	r3, #96	@ 0x60
 80022ca:	d877      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b50      	cmp	r3, #80	@ 0x50
 80022ce:	d03c      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xfa>
 80022d0:	2b50      	cmp	r3, #80	@ 0x50
 80022d2:	d873      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b40      	cmp	r3, #64	@ 0x40
 80022d6:	d058      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x13a>
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d86f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b30      	cmp	r3, #48	@ 0x30
 80022de:	d064      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b30      	cmp	r3, #48	@ 0x30
 80022e2:	d86b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d060      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d867      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d05a      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022f4:	e062      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002306:	f000 fc11 	bl	8002b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	609a      	str	r2, [r3, #8]
      break;
 8002322:	e04f      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002334:	f000 fbfa 	bl	8002b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002346:	609a      	str	r2, [r3, #8]
      break;
 8002348:	e03c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fabe 	bl	80028d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2150      	movs	r1, #80	@ 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fbc8 	bl	8002af8 <TIM_ITRx_SetConfig>
      break;
 8002368:	e02c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002376:	461a      	mov	r2, r3
 8002378:	f000 fb18 	bl	80029ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2160      	movs	r1, #96	@ 0x60
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fbb8 	bl	8002af8 <TIM_ITRx_SetConfig>
      break;
 8002388:	e01c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	461a      	mov	r2, r3
 8002398:	f000 fa9e 	bl	80028d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2140      	movs	r1, #64	@ 0x40
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fba8 	bl	8002af8 <TIM_ITRx_SetConfig>
      break;
 80023a8:	e00c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f000 fb9f 	bl	8002af8 <TIM_ITRx_SetConfig>
      break;
 80023ba:	e003      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e000      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <TIM_Base_SetConfig+0xd0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00b      	beq.n	8002468 <TIM_Base_SetConfig+0x30>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002456:	d007      	beq.n	8002468 <TIM_Base_SetConfig+0x30>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a2c      	ldr	r2, [pc, #176]	@ (800250c <TIM_Base_SetConfig+0xd4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <TIM_Base_SetConfig+0x30>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a2b      	ldr	r2, [pc, #172]	@ (8002510 <TIM_Base_SetConfig+0xd8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d108      	bne.n	800247a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a22      	ldr	r2, [pc, #136]	@ (8002508 <TIM_Base_SetConfig+0xd0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00b      	beq.n	800249a <TIM_Base_SetConfig+0x62>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <TIM_Base_SetConfig+0xd4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1e      	ldr	r2, [pc, #120]	@ (8002510 <TIM_Base_SetConfig+0xd8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <TIM_Base_SetConfig+0xd0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d103      	bne.n	80024e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f023 0201 	bic.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
  }
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800

08002514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 0201 	bic.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 0302 	bic.w	r3, r3, #2
 800255c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <TIM_OC1_SetConfig+0xc8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10c      	bne.n	800258a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0308 	bic.w	r3, r3, #8
 8002576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <TIM_OC1_SetConfig+0xc8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d111      	bne.n	80025b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00

080025e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f023 0210 	bic.w	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0320 	bic.w	r3, r3, #32
 800262a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <TIM_OC2_SetConfig+0xd0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10d      	bne.n	800265c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800265a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <TIM_OC2_SetConfig+0xd0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d113      	bne.n	800268c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800266a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <TIM_OC3_SetConfig+0xd0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10d      	bne.n	800272e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800272c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <TIM_OC3_SetConfig+0xd0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d113      	bne.n	800275e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800273c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	621a      	str	r2, [r3, #32]
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00

08002788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	031b      	lsls	r3, r3, #12
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <TIM_OC4_SetConfig+0x98>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d109      	bne.n	80027fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40012c00 	.word	0x40012c00

08002824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f023 0201 	bic.w	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a1f      	ldr	r2, [pc, #124]	@ (80028cc <TIM_TI1_SetConfig+0xa8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_TI1_SetConfig+0x46>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_TI1_SetConfig+0x46>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <TIM_TI1_SetConfig+0xac>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_TI1_SetConfig+0x46>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <TIM_TI1_SetConfig+0xb0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <TIM_TI1_SetConfig+0x4a>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <TIM_TI1_SetConfig+0x4c>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e003      	b.n	800288e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	b2db      	uxtb	r3, r3
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 030a 	and.w	r3, r3, #10
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 030a 	bic.w	r3, r3, #10
 8002914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 0210 	bic.w	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	031b      	lsls	r3, r3, #12
 8002978:	b29b      	uxth	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002986:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0210 	bic.w	r2, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	031b      	lsls	r3, r3, #12
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	621a      	str	r2, [r3, #32]
}
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002abe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	031b      	lsls	r3, r3, #12
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f043 0307 	orr.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	021a      	lsls	r2, r3, #8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	609a      	str	r2, [r3, #8]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e046      	b.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c18:	d009      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10c      	bne.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800

08002c70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e03d      	b.n	8002d08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <memset>:
 8002d36:	4603      	mov	r3, r0
 8002d38:	4402      	add	r2, r0
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <memset+0xa>
 8002d3e:	4770      	bx	lr
 8002d40:	f803 1b01 	strb.w	r1, [r3], #1
 8002d44:	e7f9      	b.n	8002d3a <memset+0x4>
	...

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d80 <__libc_init_array+0x38>)
 8002d4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d84 <__libc_init_array+0x3c>)
 8002d50:	1b64      	subs	r4, r4, r5
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	f000 f81a 	bl	8002d90 <_init>
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d88 <__libc_init_array+0x40>)
 8002d60:	4c0a      	ldr	r4, [pc, #40]	@ (8002d8c <__libc_init_array+0x44>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002dcc 	.word	0x08002dcc
 8002d84:	08002dcc 	.word	0x08002dcc
 8002d88:	08002dcc 	.word	0x08002dcc
 8002d8c:	08002dd0 	.word	0x08002dd0

08002d90 <_init>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr

08002d9c <_fini>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr
